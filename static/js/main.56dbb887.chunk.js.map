{"version":3,"sources":["components/Panel/index.js","components/Panel/Panel.js","components/Icon/Icon.js","components/Icon/index.js","components/Name/index.js","components/Name/Name.js","components/PanelContent/PanelContent.js","components/PanelContent/index.js","App.js","serviceWorker.js","index.js"],"names":["Panel","_ref","children","react_default","a","createElement","className","Icon","backgroundColor","style","defaultProps","Name","currId","Content","components_Icon","components_Name","PanelContent","props","_this","Object","classCallCheck","this","wrap","possibleConstructorReturn","getPrototypeOf","call","document","setAttribute","body","appendChild","createPortal","Component","App","components_Panel","components_PanelContent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UAEeA,MCCA,SAAAC,GAA8B,IAAZC,EAAYD,EAAZC,SAC/B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAEXJ,WCHO,SAASK,EAATN,GAA8C,IAA7BO,EAA6BP,EAA7BO,gBAAiBN,EAAYD,EAAZC,SAC/C,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOG,MAAO,CAAED,oBAElCN,GAUNK,EAAKG,aAAe,CAClBR,SAAU,SACVM,gBAAiB,QCjBJD,cCAAI,MCCA,SAAAV,GACb,OAD0CA,EAAZC,SACvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACpBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,kCCCAM,SAAS,GAEb,SAASC,IACP,OAAOV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACS,EAAD,CAAMN,gBAAgB,WAAtB,WAEFL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACS,EAAD,CAAMN,gBAAgB,WAAtB,MAEFL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACS,EAAD,CAAMN,gBAAgB,WAAtB,WAEFL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACS,EAAD,CAAMN,gBAAgB,WAAtB,OAGJL,EAAAC,EAAAC,cAACU,EAAD,WCtBWC,cD2Bb,SAAAA,EAAaC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAGlB,IAAMM,GAFNJ,EAAAC,OAAAI,EAAA,EAAAJ,CAAAE,KAAAF,OAAAK,EAAA,EAAAL,CAAAH,GAAAS,KAAAJ,KAAMJ,KAEYK,KAAOI,SAASrB,cAAc,OAH9B,OAKlBiB,EAAKK,aAAa,KAAMf,KACxBU,EAAKK,aAAa,QAAS,sBAC3BD,SAASE,KAAKC,YAAYP,GAPRJ,wEAWlB,OAAOY,uBAAa3B,EAAAC,EAAAC,cAACQ,EAAD,MAAaQ,KAAKC,aAZAS,aEb3BC,0LARX,OAAO7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACpBH,EAAAC,EAAAC,cAAC4B,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,eAJUH,cCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAAShB,SAASiB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.56dbb887.chunk.js","sourcesContent":["import Panel from './Panel'\n\nexport default Panel\n","import React from 'react'\nimport './Panel.css'\n\nexport default function Panel ({ children }) {\n  return <div className='panel'>\n    <div className='panel-client-area'>\n      {\n        children\n      }\n    </div>\n  </div>\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Icon.css'\n\nexport default function Icon ({ backgroundColor, children }) {\n  return <div className='icon' style={{ backgroundColor }}>\n    {\n      children\n    }\n  </div>\n}\n\nIcon.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  backgroundColor: PropTypes.string\n}\n\nIcon.defaultProps = {\n  children: '空',\n  backgroundColor: '#FFF'\n}\n","import Icon from './Icon'\n\nexport default Icon\n","import Name from './Name'\n\nexport default Name\n","import React from 'react'\nimport './Name.css'\n\nexport default function Name ({ children }) {\n  return <div className='name'>\n    <span className='middle-text'>&nbsp;:&nbsp;@欲三更</span>\n  </div>\n}\n","import React, { Component } from 'react'\nimport { createPortal } from 'react-dom'\nimport Icon from '../Icon'\nimport Name from '../Name'\nimport './PanelContent.css'\n\nlet currId = 0\n\nfunction Content () {\n  return <div className='panel-content'>\n    <div className='icon-list'>\n      <div className='icon-wrap'>\n        <Icon backgroundColor='#0C6BFE'>知</Icon>\n      </div>\n      <div className='icon-wrap'>\n        <Icon backgroundColor='#EF3F7B'>B</Icon>\n      </div>\n      <div className='icon-wrap'>\n        <Icon backgroundColor='#DC0023'>博</Icon>\n      </div>\n      <div className='icon-wrap'>\n        <Icon backgroundColor='#FEE012'>J</Icon>\n      </div>\n    </div>\n    <Name />\n  </div>\n}\n\nexport default class PanelContent extends Component {\n  constructor (props) {\n    super(props)\n\n    const wrap = this.wrap = document.createElement('div')\n\n    wrap.setAttribute('id', currId++)\n    wrap.setAttribute('class', 'panel-content-wrap')\n    document.body.appendChild(wrap)\n  }\n\n  render () {\n    return createPortal(<Content />, this.wrap)\n  }\n}\n","import PanelContent from './PanelContent'\n\nexport default PanelContent\n","import React, { Component } from 'react'\nimport Panel from './components/Panel'\nimport PanelContent from './components/PanelContent'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return <div className='app'>\n      <Panel>\n        <PanelContent />\n      </Panel>\n    </div>\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}